!-*-f90-*-
!
! API: Permutations, Combinations and Multisets
!
!> \page "Comments on permutations, combinations and multisets"
!> Please go to api/permutation.finc for the API documentation.


!
!
!
  function fgsl_combination_alloc(n, k)
    integer(fgsl_size_t), intent(in) :: n, k
    type(fgsl_combination) :: fgsl_combination_alloc
    fgsl_combination_alloc%gsl_combination = gsl_combination_alloc(n, k)
  end function fgsl_combination_alloc
  function fgsl_combination_calloc(n, k)
    integer(fgsl_size_t), intent(in) :: n, k
    type(fgsl_combination) :: fgsl_combination_calloc
    fgsl_combination_calloc%gsl_combination = gsl_combination_calloc(n, k)
  end function fgsl_combination_calloc
  subroutine fgsl_combination_init_first(c)
    type(fgsl_combination), intent(inout) :: c
    call gsl_combination_init_first(c%gsl_combination)
  end subroutine fgsl_combination_init_first
  subroutine fgsl_combination_init_last(c)
    type(fgsl_combination), intent(inout) :: c
    call gsl_combination_init_last(c%gsl_combination)
  end subroutine fgsl_combination_init_last
  subroutine fgsl_combination_free(c)
    type(fgsl_combination), intent(inout) :: c
    call gsl_combination_free(c%gsl_combination)
  end subroutine fgsl_combination_free
  function fgsl_combination_memcpy(dest, src)
    type(fgsl_combination), intent(inout) :: dest
    type(fgsl_combination),  intent(in) :: src
    integer(fgsl_int) :: fgsl_combination_memcpy
    fgsl_combination_memcpy = gsl_combination_memcpy(dest%gsl_combination, &
         src%gsl_combination)
  end function fgsl_combination_memcpy
  function fgsl_combination_get(c, i)
    type(fgsl_combination), intent(inout) :: c
    integer(fgsl_size_t), intent(in) :: i
    integer(fgsl_size_t) :: fgsl_combination_get
    fgsl_combination_get = gsl_combination_get(c%gsl_combination, i)
  end function fgsl_combination_get
  function fgsl_combination_n(c)
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_size_t) :: fgsl_combination_n
    fgsl_combination_n = gsl_combination_n(c%gsl_combination)
  end function fgsl_combination_n
  function fgsl_combination_k(c)
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_size_t) :: fgsl_combination_k
    fgsl_combination_k = gsl_combination_k(c%gsl_combination)
  end function fgsl_combination_k
  function fgsl_combination_data(c)
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_size_t), pointer :: fgsl_combination_data(:)
!
    integer(fgsl_size_t) :: size
    type(c_ptr) :: cdata
    size = gsl_combination_k(c%gsl_combination)
    cdata = gsl_combination_data(c%gsl_combination)
    if (c_associated(cdata)) then
       call c_f_pointer(cdata,fgsl_combination_data,(/size/))
    else
       nullify(fgsl_combination_data)
    end if
  end function fgsl_combination_data
  function fgsl_combination_valid(c)
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_int) :: fgsl_combination_valid
    fgsl_combination_valid = gsl_combination_valid(c%gsl_combination)
  end function fgsl_combination_valid
  function fgsl_combination_next(c)
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_int) :: fgsl_combination_next
    fgsl_combination_next = gsl_combination_next(c%gsl_combination)
  end function fgsl_combination_next
  function fgsl_combination_prev(c)
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_int) :: fgsl_combination_prev
    fgsl_combination_prev = gsl_combination_prev(c%gsl_combination)
  end function fgsl_combination_prev
  function fgsl_combination_fwrite(stream, c)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_int) :: fgsl_combination_fwrite
    fgsl_combination_fwrite = gsl_combination_fwrite(stream%gsl_file, &
         c%gsl_combination)
  end function fgsl_combination_fwrite
  function fgsl_combination_fread(stream, c)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_combination), intent(inout) :: c
    integer(fgsl_int) :: fgsl_combination_fread
    fgsl_combination_fread = gsl_combination_fread(stream%gsl_file, &
         c%gsl_combination)
  end function fgsl_combination_fread
  function fgsl_combination_fprintf(stream, c, format)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_combination), intent(in) :: c
    character(kind=fgsl_char, len=*), intent(in) :: format
    integer(fgsl_int) :: fgsl_combination_fprintf
!
    fgsl_combination_fprintf = gsl_combination_fprintf(stream%gsl_file, &
         c%gsl_combination, format // c_null_char)
  end function fgsl_combination_fprintf
  function fgsl_combination_fscanf(stream, c)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_combination), intent(inout) :: c
    integer(fgsl_int) :: fgsl_combination_fscanf
    fgsl_combination_fscanf = gsl_combination_fscanf(stream%gsl_file, &
         c%gsl_combination)
  end function fgsl_combination_fscanf
!
!
!
  function fgsl_multiset_alloc(n, k)
    integer(fgsl_size_t), intent(in) :: n, k
    type(fgsl_multiset) :: fgsl_multiset_alloc
    fgsl_multiset_alloc%gsl_multiset = gsl_multiset_alloc(n, k)
  end function fgsl_multiset_alloc
  function fgsl_multiset_calloc(n, k)
    integer(fgsl_size_t), intent(in) :: n, k
    type(fgsl_multiset) :: fgsl_multiset_calloc
    fgsl_multiset_calloc%gsl_multiset = gsl_multiset_calloc(n, k)
  end function fgsl_multiset_calloc
  subroutine fgsl_multiset_init_first(c)
    type(fgsl_multiset), intent(inout) :: c
    call gsl_multiset_init_first(c%gsl_multiset)
  end subroutine fgsl_multiset_init_first
  subroutine fgsl_multiset_init_last(c)
    type(fgsl_multiset), intent(inout) :: c
    call gsl_multiset_init_last(c%gsl_multiset)
  end subroutine fgsl_multiset_init_last
  subroutine fgsl_multiset_free(c)
    type(fgsl_multiset), intent(inout) :: c
    call gsl_multiset_free(c%gsl_multiset)
  end subroutine fgsl_multiset_free
  function fgsl_multiset_memcpy(dest, src)
    type(fgsl_multiset), intent(inout) :: dest
    type(fgsl_multiset),  intent(in) :: src
    integer(fgsl_int) :: fgsl_multiset_memcpy
    fgsl_multiset_memcpy = gsl_multiset_memcpy(dest%gsl_multiset, &
         src%gsl_multiset)
  end function fgsl_multiset_memcpy
  function fgsl_multiset_get(c, i)
    type(fgsl_multiset), intent(inout) :: c
    integer(fgsl_size_t), intent(in) :: i
    integer(fgsl_size_t) :: fgsl_multiset_get
    fgsl_multiset_get = gsl_multiset_get(c%gsl_multiset, i)
  end function fgsl_multiset_get
  function fgsl_multiset_n(c)
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_size_t) :: fgsl_multiset_n
    fgsl_multiset_n = gsl_multiset_n(c%gsl_multiset)
  end function fgsl_multiset_n
  function fgsl_multiset_k(c)
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_size_t) :: fgsl_multiset_k
    fgsl_multiset_k = gsl_multiset_k(c%gsl_multiset)
  end function fgsl_multiset_k
  function fgsl_multiset_data(c)
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_size_t), pointer :: fgsl_multiset_data(:)
!
    integer(fgsl_size_t) :: size
    type(c_ptr) :: cdata
    size = gsl_multiset_k(c%gsl_multiset)
    cdata = gsl_multiset_data(c%gsl_multiset)
    if (c_associated(cdata)) then
       call c_f_pointer(cdata,fgsl_multiset_data,(/size/))
    else
       nullify(fgsl_multiset_data)
    end if
  end function fgsl_multiset_data
  function fgsl_multiset_valid(c)
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_int) :: fgsl_multiset_valid
    fgsl_multiset_valid = gsl_multiset_valid(c%gsl_multiset)
  end function fgsl_multiset_valid
  function fgsl_multiset_next(c)
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_int) :: fgsl_multiset_next
    fgsl_multiset_next = gsl_multiset_next(c%gsl_multiset)
  end function fgsl_multiset_next
  function fgsl_multiset_prev(c)
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_int) :: fgsl_multiset_prev
    fgsl_multiset_prev = gsl_multiset_prev(c%gsl_multiset)
  end function fgsl_multiset_prev
  function fgsl_multiset_fwrite(stream, c)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_int) :: fgsl_multiset_fwrite
    fgsl_multiset_fwrite = gsl_multiset_fwrite(stream%gsl_file, &
         c%gsl_multiset)
  end function fgsl_multiset_fwrite
  function fgsl_multiset_fread(stream, c)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_multiset), intent(inout) :: c
    integer(fgsl_int) :: fgsl_multiset_fread
    fgsl_multiset_fread = gsl_multiset_fread(stream%gsl_file, &
         c%gsl_multiset)
  end function fgsl_multiset_fread
  function fgsl_multiset_fprintf(stream, c, format)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_multiset), intent(in) :: c
    character(kind=fgsl_char, len=*), intent(in) :: format
    integer(fgsl_int) :: fgsl_multiset_fprintf
!
    fgsl_multiset_fprintf = gsl_multiset_fprintf(stream%gsl_file, &
         c%gsl_multiset, format // c_null_char)
  end function fgsl_multiset_fprintf
  function fgsl_multiset_fscanf(stream, c)
    type(fgsl_file), intent(in) :: stream
    type(fgsl_multiset), intent(inout) :: c
    integer(fgsl_int) :: fgsl_multiset_fscanf
    fgsl_multiset_fscanf = gsl_multiset_fscanf(stream%gsl_file, &
         c%gsl_multiset)
  end function fgsl_multiset_fscanf

!
! additional utilities
!

  function fgsl_combination_status(combination)
    type(fgsl_combination), intent(in) :: combination
    logical :: fgsl_combination_status
    fgsl_combination_status = .true.
    if (.not. c_associated(combination%gsl_combination)) &
         fgsl_combination_status = .false.
  end function fgsl_combination_status
  function fgsl_multiset_status(multiset)
    type(fgsl_multiset), intent(in) :: multiset
    logical :: fgsl_multiset_status
    fgsl_multiset_status = .true.
    if (.not. c_associated(multiset%gsl_multiset)) &
         fgsl_multiset_status = .false.
  end function fgsl_multiset_status

  function fgsl_sizeof_combination(c)
    type(fgsl_combination), intent(in) :: c
    integer(fgsl_size_t) :: fgsl_sizeof_combination
    fgsl_sizeof_combination = gsl_aux_sizeof_combination()
  end function fgsl_sizeof_combination
  function fgsl_sizeof_multiset(c)
    type(fgsl_multiset), intent(in) :: c
    integer(fgsl_size_t) :: fgsl_sizeof_multiset
    fgsl_sizeof_multiset = gsl_aux_sizeof_multiset()
  end function fgsl_sizeof_multiset
