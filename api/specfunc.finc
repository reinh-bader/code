!-*-f90-*-
!
! API: Special Functions
!
!> \page "Comments on special functions"
!> Please go to api/specfunc.finc for the API documentation.
!>





  function fgsl_sf_legendre_p1_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_p1_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_p1_e = gsl_sf_legendre_p1_e(x, res)
    result = res
  end function fgsl_sf_legendre_p1_e
!  fgsl_sf_legendre_p2 --> interface
  function fgsl_sf_legendre_p2_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_p2_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_p2_e = gsl_sf_legendre_p2_e(x, res)
    result = res
  end function fgsl_sf_legendre_p2_e
!  fgsl_sf_legendre_p3 --> interface
  function fgsl_sf_legendre_p3_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_p3_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_p3_e = gsl_sf_legendre_p3_e(x, res)
    result = res
  end function fgsl_sf_legendre_p3_e
!  fgsl_sf_legendre_pl --> interface
  function fgsl_sf_legendre_pl_e(l, x, result)
    integer(fgsl_int), intent(in) :: l
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_pl_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_pl_e = gsl_sf_legendre_pl_e(l, x, res)
    result = res
  end function fgsl_sf_legendre_pl_e
  function fgsl_sf_legendre_pl_array(x, result_array)
    real(fgsl_double), intent(in) :: x
    real(fgsl_double), intent(inout), contiguous, target :: result_array(:)
    real(fgsl_double) :: fgsl_sf_legendre_pl_array
    fgsl_sf_legendre_pl_array = gsl_sf_legendre_pl_array( &
         size(result_array, kind=fgsl_int)-1,&
         x, c_loc(result_array))
  end function fgsl_sf_legendre_pl_array
  function fgsl_sf_legendre_pl_deriv_array(x, result_array, deriv_array)
    real(fgsl_double), intent(in) :: x
    real(fgsl_double), intent(inout), contiguous, target :: &
         result_array(:), deriv_array(:)
    real(fgsl_double) :: fgsl_sf_legendre_pl_deriv_array
    if (size(result_array) /= size(deriv_array)) then
      call fgsl_error('result_array and deriv_array dimensions do not match',&
       'fgsl_specfunc', __LINE__, fgsl_ebadlen)
      fgsl_sf_legendre_pl_deriv_array = 0.0_fgsl_double
      return
    end if
    fgsl_sf_legendre_pl_deriv_array = &
         gsl_sf_legendre_pl_deriv_array(size(result_array, kind=fgsl_int)-1, &
         x, c_loc(result_array), c_loc(deriv_array))
  end function fgsl_sf_legendre_pl_deriv_array
!  fgsl_sf_legendre_q0 --> interface
  function fgsl_sf_legendre_q0_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_q0_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_q0_e = gsl_sf_legendre_q0_e(x, res)
    result = res
  end function fgsl_sf_legendre_q0_e
!  fgsl_sf_legendre_q1 --> interface
  function fgsl_sf_legendre_q1_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_q1_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_q1_e = gsl_sf_legendre_q1_e(x, res)
    result = res
  end function fgsl_sf_legendre_q1_e
!  fgsl_sf_legendre_ql --> interface
  function fgsl_sf_legendre_ql_e(l, x, result)
    integer(fgsl_int), intent(in) :: l
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_ql_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_ql_e = gsl_sf_legendre_ql_e(l, x, res)
    result = res
  end function fgsl_sf_legendre_ql_e
!  fgsl_sf_legendre_plm --> interface
  function fgsl_sf_legendre_plm_e(l, m, x, result)
    integer(fgsl_int), intent(in) :: l, m
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_plm_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_plm_e = gsl_sf_legendre_plm_e(l, m, x, res)
    result = res
  end function fgsl_sf_legendre_plm_e
!  fgsl_sf_legendre_sphplm --> interface
  function fgsl_sf_legendre_sphplm_e(l, m, x, result)
    integer(fgsl_int), intent(in) :: l, m
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_sphplm_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_sphplm_e = gsl_sf_legendre_sphplm_e(l, m, x, res)
    result = res
  end function fgsl_sf_legendre_sphplm_e
!  fgsl_sf_conicalp_half --> interface
  function fgsl_sf_conicalp_half_e(lambda, x, result)
    real(fgsl_double), intent(in) :: lambda, x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_conicalp_half_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_conicalp_half_e = gsl_sf_conicalp_half_e(lambda, x, res)
    result = res
  end function fgsl_sf_conicalp_half_e
!  fgsl_sf_conicalp_mhalf --> interface
  function fgsl_sf_conicalp_mhalf_e(lambda, x, result)
    real(fgsl_double), intent(in) :: lambda, x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_conicalp_mhalf_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_conicalp_mhalf_e = gsl_sf_conicalp_mhalf_e(lambda, x, res)
    result = res
  end function fgsl_sf_conicalp_mhalf_e
!  fgsl_sf_conicalp_0 --> interface
  function fgsl_sf_conicalp_0_e(lambda, x, result)
    real(fgsl_double), intent(in) :: lambda, x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_conicalp_0_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_conicalp_0_e = gsl_sf_conicalp_0_e(lambda, x, res)
    result = res
  end function fgsl_sf_conicalp_0_e
!  fgsl_sf_conicalp_1 --> interface
  function fgsl_sf_conicalp_1_e(lambda, x, result)
    real(fgsl_double), intent(in) :: lambda, x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_conicalp_1_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_conicalp_1_e = gsl_sf_conicalp_1_e(lambda, x, res)
    result = res
  end function fgsl_sf_conicalp_1_e
!  fgsl_sf_conicalp_sph_reg --> interface
  function fgsl_sf_conicalp_sph_reg_e(l, lambda, x, result)
    integer(fgsl_int), intent(in) :: l
    real(fgsl_double), intent(in) :: lambda, x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_conicalp_sph_reg_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_conicalp_sph_reg_e = gsl_sf_conicalp_sph_reg_e(l, lambda, x, res)
    result = res
  end function fgsl_sf_conicalp_sph_reg_e
!  fgsl_sf_conicalp_cyl_reg --> interface
  function fgsl_sf_conicalp_cyl_reg_e(l, lambda, x, result)
    integer(fgsl_int), intent(in) :: l
    real(fgsl_double), intent(in) :: lambda, x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_conicalp_cyl_reg_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_conicalp_cyl_reg_e = gsl_sf_conicalp_cyl_reg_e(l, lambda, x, res)
    result = res
  end function fgsl_sf_conicalp_cyl_reg_e
!  fgsl_sf_legendre_h3d_0 --> interface
  function fgsl_sf_legendre_h3d_0_e(lambda, eta, result)
    real(fgsl_double), intent(in) :: lambda, eta
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_h3d_0_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_h3d_0_e = gsl_sf_legendre_h3d_0_e(lambda, eta, res)
    result = res
  end function fgsl_sf_legendre_h3d_0_e
!  fgsl_sf_legendre_h3d_1 --> interface
  function fgsl_sf_legendre_h3d_1_e(lambda, eta, result)
    real(fgsl_double), intent(in) :: lambda, eta
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_h3d_1_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_h3d_1_e = gsl_sf_legendre_h3d_1_e(lambda, eta, res)
    result = res
  end function fgsl_sf_legendre_h3d_1_e
!  fgsl_sf_legendre_h3d --> interface
  function fgsl_sf_legendre_h3d_e(l, lambda, eta, result)
    integer(fgsl_int), intent(in) :: l
    real(fgsl_double), intent(in) :: lambda, eta
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_legendre_h3d_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_legendre_h3d_e = gsl_sf_legendre_h3d_e(l, lambda, eta, res)
    result = res
  end function fgsl_sf_legendre_h3d_e
  function fgsl_sf_legendre_h3d_array(lambda, eta, result_array)
    real(fgsl_double), intent(in) :: lambda, eta
    real(fgsl_double), intent(inout), contiguous, target :: result_array(:)
    integer(fgsl_int) :: fgsl_sf_legendre_h3d_array
    fgsl_sf_legendre_h3d_array = gsl_sf_legendre_h3d_array( &
         size(result_array, kind=fgsl_int)-1,&
         lambda, eta, c_loc(result_array))
  end function fgsl_sf_legendre_h3d_array
!  fgsl_sf_log --> interface
  function fgsl_sf_log_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_log_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_log_e = gsl_sf_log_e(x, res)
    result = res
  end function fgsl_sf_log_e
!  fgsl_sf_log_abs --> interface
  function fgsl_sf_log_abs_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_log_abs_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_log_abs_e = gsl_sf_log_abs_e(x, res)
    result = res
  end function fgsl_sf_log_abs_e
  function fgsl_sf_complex_log_e(zr, zi, lnr, theta)
    real(fgsl_double), intent(in) :: zr, zi
    type(fgsl_sf_result), intent(out) :: lnr, theta
    integer(fgsl_int) :: fgsl_sf_complex_log_e
!
    type(gsl_sf_result) :: lnr_loc, theta_loc
    fgsl_sf_complex_log_e = gsl_sf_complex_log_e(zr, zi, lnr_loc, theta_loc)
    lnr = lnr_loc
    theta = theta_loc
  end function fgsl_sf_complex_log_e
!  fgsl_sf_log_1plusx --> interface
  function fgsl_sf_log_1plusx_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_log_1plusx_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_log_1plusx_e = gsl_sf_log_1plusx_e(x, res)
    result = res
  end function fgsl_sf_log_1plusx_e
!  fgsl_sf_log_1plusx_mx --> interface
  function fgsl_sf_log_1plusx_mx_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_log_1plusx_mx_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_log_1plusx_mx_e = gsl_sf_log_1plusx_mx_e(x, res)
    result = res
  end function fgsl_sf_log_1plusx_mx_e
!  fgsl_sf_psi_int --> interface
  function fgsl_sf_psi_int_e(n, result)
    integer(c_int), intent(in) :: n
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_psi_int_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_psi_int_e = gsl_sf_psi_int_e(n, res)
    result = res
  end function fgsl_sf_psi_int_e
!  fgsl_sf_psi --> interface
  function fgsl_sf_psi_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_psi_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_psi_e = gsl_sf_psi_e(x, res)
    result = res
  end function fgsl_sf_psi_e
!  fgsl_sf_psi_1_int --> interface
  function fgsl_sf_psi_1_int_e(n, result)
    integer(c_int), intent(in) :: n
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_psi_1_int_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_psi_1_int_e = gsl_sf_psi_1_int_e(n, res)
    result = res
  end function fgsl_sf_psi_1_int_e
!  fgsl_sf_psi_1 --> interface
  function fgsl_sf_psi_1_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_psi_1_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_psi_1_e = gsl_sf_psi_1_e(x, res)
    result = res
  end function fgsl_sf_psi_1_e
!  fgsl_sf_psi_n --> interface
  function fgsl_sf_psi_n_e(m, x, result)
    integer(fgsl_int), intent(in) :: m
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_psi_n_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_psi_n_e = gsl_sf_psi_n_e(m, x, res)
    result = res
  end function fgsl_sf_psi_n_e
!  fgsl_sf_psi_1piy --> interface
  function fgsl_sf_psi_1piy_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_psi_1piy_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_psi_1piy_e = gsl_sf_psi_1piy_e(x, res)
    result = res
  end function fgsl_sf_psi_1piy_e
!  fgsl_sf_synchrotron_1 --> interface
  function fgsl_sf_synchrotron_1_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_synchrotron_1_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_synchrotron_1_e = gsl_sf_synchrotron_1_e(x, res)
    result = res
  end function fgsl_sf_synchrotron_1_e
!  fgsl_sf_synchrotron_2 --> interface
  function fgsl_sf_synchrotron_2_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_synchrotron_2_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_synchrotron_2_e = gsl_sf_synchrotron_2_e(x, res)
    result = res
  end function fgsl_sf_synchrotron_2_e
!  fgsl_sf_transport_2 --> interface
  function fgsl_sf_transport_2_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_transport_2_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_transport_2_e = gsl_sf_transport_2_e(x, res)
    result = res
  end function fgsl_sf_transport_2_e
!  fgsl_sf_transport_3 --> interface
  function fgsl_sf_transport_3_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_transport_3_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_transport_3_e = gsl_sf_transport_3_e(x, res)
    result = res
  end function fgsl_sf_transport_3_e
!  fgsl_sf_transport_4 --> interface
  function fgsl_sf_transport_4_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_transport_4_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_transport_4_e = gsl_sf_transport_4_e(x, res)
    result = res
  end function fgsl_sf_transport_4_e
!  fgsl_sf_transport_5 --> interface
  function fgsl_sf_transport_5_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_transport_5_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_transport_5_e = gsl_sf_transport_5_e(x, res)
    result = res
  end function fgsl_sf_transport_5_e
!  fgsl_sf_hypot --> interface
  function fgsl_sf_hypot_e(x, y, result)
    real(fgsl_double), intent(in) :: x, y
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_hypot_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_hypot_e = gsl_sf_hypot_e(x, y, res)
    result = res
  end function fgsl_sf_hypot_e
!  fgsl_sf_sinc --> interface
  function fgsl_sf_sinc_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_sinc_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_sinc_e = gsl_sf_sinc_e(x, res)
    result = res
  end function fgsl_sf_sinc_e
  function fgsl_sf_complex_sin_e(zr, zi, szr, szi)
    real(fgsl_double), intent(in) :: zr, zi
    type(fgsl_sf_result), intent(out) :: szr, szi
    integer(fgsl_int) :: fgsl_sf_complex_sin_e
!
    type(gsl_sf_result) :: r_loc, i_loc
    fgsl_sf_complex_sin_e = gsl_sf_complex_sin_e(zr, zi, r_loc, i_loc)
    szr = r_loc
    szi = i_loc
  end function fgsl_sf_complex_sin_e
  function fgsl_sf_complex_cos_e(zr, zi, czr, czi)
    real(fgsl_double), intent(in) :: zr, zi
    type(fgsl_sf_result), intent(out) :: czr, czi
    integer(fgsl_int) :: fgsl_sf_complex_cos_e
!
    type(gsl_sf_result) :: r_loc, i_loc
    fgsl_sf_complex_cos_e = gsl_sf_complex_cos_e(zr, zi, r_loc, i_loc)
    czr = r_loc
    czi = i_loc
  end function fgsl_sf_complex_cos_e
  function fgsl_sf_complex_logsin_e(zr, zi, lszr, lszi)
    real(fgsl_double), intent(in) :: zr, zi
    type(fgsl_sf_result), intent(out) :: lszr, lszi
    integer(fgsl_int) :: fgsl_sf_complex_logsin_e
!
    type(gsl_sf_result) :: r_loc, i_loc
    fgsl_sf_complex_logsin_e = gsl_sf_complex_logsin_e(zr, zi, r_loc, i_loc)
    lszr = r_loc
    lszi = i_loc
  end function fgsl_sf_complex_logsin_e
!  fgsl_sf_lnsinh --> interface
  function fgsl_sf_lnsinh_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_lnsinh_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_lnsinh_e = gsl_sf_lnsinh_e(x, res)
    result = res
  end function fgsl_sf_lnsinh_e
!  fgsl_sf_lncosh --> interface
  function fgsl_sf_lncosh_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_lncosh_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_lncosh_e = gsl_sf_lncosh_e(x, res)
    result = res
  end function fgsl_sf_lncosh_e
  function fgsl_sf_polar_to_rect(r, theta, x, y)
    real(fgsl_double), intent(in) :: r, theta
    type(fgsl_sf_result), intent(out) :: x, y
    integer(fgsl_int) :: fgsl_sf_polar_to_rect
!
    type(gsl_sf_result) :: x_loc, y_loc
    fgsl_sf_polar_to_rect = gsl_sf_polar_to_rect(r, theta, x_loc, y_loc)
    x = x_loc
    y = y_loc
  end function fgsl_sf_polar_to_rect
  function fgsl_sf_rect_to_polar(x, y, r, theta)
    real(fgsl_double), intent(in) :: x, y
    type(fgsl_sf_result), intent(out) :: r, theta
    integer(fgsl_int) :: fgsl_sf_rect_to_polar
!
    type(gsl_sf_result) :: r_loc, th_loc
    fgsl_sf_rect_to_polar = gsl_sf_rect_to_polar(x, y, r_loc, th_loc)
    r = r_loc
    theta = th_loc
  end function fgsl_sf_rect_to_polar
!  fgsl_sf_angle_restrict_symm --> interface
  function fgsl_sf_angle_restrict_symm_e(theta)
    real(fgsl_double), intent(inout) :: theta
    integer(fgsl_int) :: fgsl_sf_angle_restrict_symm_e
!
    fgsl_sf_angle_restrict_symm_e = gsl_sf_angle_restrict_symm_e(theta)
  end function fgsl_sf_angle_restrict_symm_e
!  fgsl_sf_angle_restrict_pos --> interface
  function fgsl_sf_angle_restrict_pos_e(theta)
    real(fgsl_double), intent(inout) :: theta
    integer(fgsl_int) :: fgsl_sf_angle_restrict_pos_e
!
    fgsl_sf_angle_restrict_pos_e = gsl_sf_angle_restrict_pos_e(theta)
  end function fgsl_sf_angle_restrict_pos_e
  function fgsl_sf_sin_err_e(x, dx, result)
    real(fgsl_double), intent(in) :: x, dx
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_sin_err_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_sin_err_e = gsl_sf_sin_err_e(x, dx, res)
    result = res
  end function fgsl_sf_sin_err_e
  function fgsl_sf_cos_err_e(x, dx, result)
    real(fgsl_double), intent(in) :: x, dx
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_cos_err_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_cos_err_e = gsl_sf_cos_err_e(x, dx, res)
    result = res
  end function fgsl_sf_cos_err_e
!  fgsl_sf_zeta_int --> interface
  function fgsl_sf_zeta_int_e(n, result)
    integer(c_int), intent(in) :: n
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_zeta_int_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_zeta_int_e = gsl_sf_zeta_int_e(n, res)
    result = res
  end function fgsl_sf_zeta_int_e
!  fgsl_sf_zeta --> interface
  function fgsl_sf_zeta_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_zeta_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_zeta_e = gsl_sf_zeta_e(x, res)
    result = res
  end function fgsl_sf_zeta_e
!  fgsl_sf_zetam1_int --> interface
  function fgsl_sf_zetam1_int_e(n, result)
    integer(c_int), intent(in) :: n
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_zetam1_int_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_zetam1_int_e = gsl_sf_zetam1_int_e(n, res)
    result = res
  end function fgsl_sf_zetam1_int_e
!  fgsl_sf_zetam1 --> interface
  function fgsl_sf_zetam1_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_zetam1_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_zetam1_e = gsl_sf_zetam1_e(x, res)
    result = res
  end function fgsl_sf_zetam1_e
!  fgsl_sf_hzeta --> interface
  function fgsl_sf_hzeta_e(s, q, result)
    real(fgsl_double), intent(in) :: s, q
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_hzeta_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_hzeta_e = gsl_sf_hzeta_e(s, q, res)
    result = res
  end function fgsl_sf_hzeta_e
!  fgsl_sf_eta_int --> interface
  function fgsl_sf_eta_int_e(n, result)
    integer(c_int), intent(in) :: n
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_eta_int_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_eta_int_e = gsl_sf_eta_int_e(n, res)
    result = res
  end function fgsl_sf_eta_int_e
!  fgsl_sf_eta --> interface
  function fgsl_sf_eta_e(x, result)
    real(fgsl_double), intent(in) :: x
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_eta_e
!
    type(gsl_sf_result) :: res
    fgsl_sf_eta_e = gsl_sf_eta_e(x, res)
    result = res
  end function fgsl_sf_eta_e
!

  function fgsl_sf_legendre_array(norm, lmax, x, result_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x
    real(fgsl_double), dimension(:), intent(inout), contiguous, &
         target :: result_array
    integer(fgsl_int) :: fgsl_sf_legendre_array
    fgsl_sf_legendre_array = gsl_sf_legendre_array(&
    norm%gsl_sf_legendre_t, lmax, x, c_loc(result_array))
  end function fgsl_sf_legendre_array
  function fgsl_sf_legendre_array_e(norm, lmax, x, csphase, result_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x, csphase
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array
    integer(fgsl_int) :: fgsl_sf_legendre_array_e
    fgsl_sf_legendre_array_e = gsl_sf_legendre_array_e(&
    norm%gsl_sf_legendre_t, lmax, x, csphase, c_loc(result_array))
  end function fgsl_sf_legendre_array_e
  function fgsl_sf_legendre_deriv_array(norm, lmax, x, result_array, result_deriv_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x
    real(fgsl_double), dimension(:), intent(inout), contiguous, &
         target :: result_array, result_deriv_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv_array
    fgsl_sf_legendre_deriv_array = gsl_sf_legendre_deriv_array(&
    norm%gsl_sf_legendre_t, lmax, x, &
    c_loc(result_array), c_loc(result_deriv_array))
  end function fgsl_sf_legendre_deriv_array
  function fgsl_sf_legendre_deriv_array_e(norm, lmax, x, csphase, result_array, &
    result_deriv_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x, csphase
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array, result_deriv_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv_array_e
    fgsl_sf_legendre_deriv_array_e = gsl_sf_legendre_deriv_array_e(&
    norm%gsl_sf_legendre_t, lmax, x, csphase, &
    c_loc(result_array), c_loc(result_deriv_array))
  end function fgsl_sf_legendre_deriv_array_e
  function fgsl_sf_legendre_deriv_alt_array(norm, lmax, x, result_array, result_deriv_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array, result_deriv_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv_alt_array
    fgsl_sf_legendre_deriv_alt_array = gsl_sf_legendre_deriv_alt_array(&
    norm%gsl_sf_legendre_t, lmax, x, c_loc(result_array), &
    c_loc(result_deriv_array))
  end function fgsl_sf_legendre_deriv_alt_array
  function fgsl_sf_legendre_deriv_alt_array_e(norm, lmax, x, csphase, result_array, &
    result_deriv_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x, csphase
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array, result_deriv_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv_alt_array_e
    fgsl_sf_legendre_deriv_alt_array_e = gsl_sf_legendre_deriv_alt_array_e(&
    norm%gsl_sf_legendre_t, lmax, x, csphase, &
    c_loc(result_array), c_loc(result_deriv_array))
  end function fgsl_sf_legendre_deriv_alt_array_e
  function fgsl_sf_legendre_deriv2_array(norm, lmax, x, result_array, &
    result_deriv_array, result_deriv2_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array, result_deriv_array, result_deriv2_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv2_array
    fgsl_sf_legendre_deriv2_array = gsl_sf_legendre_deriv2_array(&
    norm%gsl_sf_legendre_t, lmax, x, c_loc(result_array), &
    c_loc(result_deriv_array), c_loc(result_deriv2_array))
  end function fgsl_sf_legendre_deriv2_array
  function fgsl_sf_legendre_deriv2_array_e(norm, lmax, x, csphase, result_array, &
    result_deriv_array, result_deriv2_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x, csphase
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array, &
    result_deriv_array, result_deriv2_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv2_array_e
    fgsl_sf_legendre_deriv2_array_e = gsl_sf_legendre_deriv2_array_e(&
    norm%gsl_sf_legendre_t, lmax, x, csphase, c_loc(result_array), &
    c_loc(result_deriv_array), c_loc(result_deriv2_array))
  end function fgsl_sf_legendre_deriv2_array_e
  function fgsl_sf_legendre_deriv2_alt_array(norm, lmax, x, result_array, &
    result_deriv_array, result_deriv2_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array, result_deriv_array, result_deriv2_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv2_alt_array
    fgsl_sf_legendre_deriv2_alt_array = gsl_sf_legendre_deriv2_alt_array(&
    norm%gsl_sf_legendre_t, lmax, x, c_loc(result_array), &
    c_loc(result_deriv_array), c_loc(result_deriv2_array))
  end function fgsl_sf_legendre_deriv2_alt_array
  function fgsl_sf_legendre_deriv2_alt_array_e(norm, lmax, x, csphase, result_array, &
    result_deriv_array, result_deriv2_array)
    type(fgsl_sf_legendre_t), intent(in) :: norm
    integer(fgsl_size_t), intent(in) :: lmax
    real(fgsl_double), intent(in) :: x, csphase
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array, result_deriv_array, result_deriv2_array
    integer(fgsl_int) :: fgsl_sf_legendre_deriv2_alt_array_e
    fgsl_sf_legendre_deriv2_alt_array_e = gsl_sf_legendre_deriv2_alt_array_e(&
    norm%gsl_sf_legendre_t, lmax, x, csphase, c_loc(result_array), &
    c_loc(result_deriv_array), c_loc(result_deriv2_array))
  end function fgsl_sf_legendre_deriv2_alt_array_e
!  fgsl_sf_legendre_array_n --> interface
!  fgsl_sf_legendre_array_index --> interface
!  fgsl_sf_legendre_nlm --> interface
  function fgsl_sf_mathieu_a_array(order_min, order_max, qq, work, result_array)
    integer(fgsl_int), intent(in) :: order_min, order_max
    real(fgsl_double), intent(in) :: qq
    type(fgsl_sf_mathieu_workspace), intent(inout) :: work
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array
    integer(fgsl_int) :: fgsl_sf_mathieu_a_array
    fgsl_sf_mathieu_a_array = gsl_sf_mathieu_a_array(order_min, order_max, qq, &
    work%gsl_sf_mathieu_workspace, c_loc(result_array))
  end function fgsl_sf_mathieu_a_array
  function fgsl_sf_mathieu_b_array(order_min, order_max, qq, work, result_array)
    integer(fgsl_int), intent(in) :: order_min, order_max
    real(fgsl_double), intent(in) :: qq
    type(fgsl_sf_mathieu_workspace), intent(inout) :: work
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array
    integer(fgsl_int) :: fgsl_sf_mathieu_b_array
    fgsl_sf_mathieu_b_array = gsl_sf_mathieu_b_array(order_min, order_max, qq, &
    work%gsl_sf_mathieu_workspace, c_loc(result_array))
  end function fgsl_sf_mathieu_b_array
  function fgsl_sf_mathieu_a_e(order, qq, result)
    integer(c_int), intent(in) :: order
    real(c_double), intent(in) :: qq
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_mathieu_a_e
    type(gsl_sf_result), target :: res
    fgsl_sf_mathieu_a_e = gsl_sf_mathieu_a_e(order, qq, c_loc(res))
    result = res
  end function fgsl_sf_mathieu_a_e
!  fgsl_sf_mathieu_a --> interface
  function fgsl_sf_mathieu_b_e(order, qq, result)
    integer(c_int), intent(in) :: order
    real(c_double), intent(in) :: qq
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_mathieu_b_e
    type(gsl_sf_result), target :: res
    fgsl_sf_mathieu_b_e = gsl_sf_mathieu_b_e(order, qq, c_loc(res))
    result = res
  end function fgsl_sf_mathieu_b_e
!  fgsl_sf_mathieu_b --> interface
!  fgsl_sf_mathieu_a_coeff --> interface
!  fgsl_sf_mathieu_b_coeff --> interface
  function fgsl_sf_mathieu_alloc(nn, qq)
    integer(fgsl_size_t), intent(in) :: nn
    real(fgsl_double), intent(in) :: qq
    type(fgsl_sf_mathieu_workspace) :: fgsl_sf_mathieu_alloc
    fgsl_sf_mathieu_alloc%gsl_sf_mathieu_workspace = &
    gsl_sf_mathieu_alloc(nn, qq)
  end function fgsl_sf_mathieu_alloc
  subroutine fgsl_sf_mathieu_free(workspace)
    type(fgsl_sf_mathieu_workspace), intent(inout) :: workspace
    call gsl_sf_mathieu_free(workspace%gsl_sf_mathieu_workspace)
  end subroutine fgsl_sf_mathieu_free
  function fgsl_sf_mathieu_ce_e(order, qq, zz, result)
    integer(fgsl_int), intent(in) :: order
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_mathieu_ce_e
    type(gsl_sf_result), target :: res
    fgsl_sf_mathieu_ce_e = gsl_sf_mathieu_ce_e(order, qq, zz, c_loc(res))
    result = res
  end function fgsl_sf_mathieu_ce_e
!  fgsl_sf_mathieu_ce --> interface
  function fgsl_sf_mathieu_se_e(order, qq, zz, result)
    integer(fgsl_int), intent(in) :: order
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_mathieu_se_e
    type(gsl_sf_result), target :: res
    fgsl_sf_mathieu_se_e = gsl_sf_mathieu_se_e(order, qq, zz, c_loc(res))
    result = res
  end function fgsl_sf_mathieu_se_e
!  fgsl_sf_mathieu_se --> interface
  function fgsl_sf_mathieu_ce_array(nmin, nmax, qq, zz, work, result_array)
    integer(fgsl_int), intent(in) :: nmin, nmax
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_mathieu_workspace), intent(inout) :: work
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array
    integer(fgsl_int) :: fgsl_sf_mathieu_ce_array
    fgsl_sf_mathieu_ce_array = gsl_sf_mathieu_ce_array(nmin, nmax, qq, zz, &
    work%gsl_sf_mathieu_workspace, c_loc(result_array))
  end function fgsl_sf_mathieu_ce_array
  function fgsl_sf_mathieu_se_array(nmin, nmax, qq, zz, work, result_array)
    integer(fgsl_int), intent(in) :: nmin, nmax
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_mathieu_workspace), intent(inout) :: work
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array
    integer(fgsl_int) :: fgsl_sf_mathieu_se_array
    fgsl_sf_mathieu_se_array = gsl_sf_mathieu_se_array(nmin, nmax, qq, zz, &
    work%gsl_sf_mathieu_workspace, c_loc(result_array))
  end function fgsl_sf_mathieu_se_array
  function fgsl_sf_mathieu_mc_e(kind, order, qq, zz, result)
    integer(fgsl_int), intent(in) :: kind, order
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_mathieu_mc_e
    type(gsl_sf_result), target :: res
    fgsl_sf_mathieu_mc_e = gsl_sf_mathieu_mc_e(kind, order, qq, zz, c_loc(res))
    result = res
  end function fgsl_sf_mathieu_mc_e
!  fgsl_sf_mathieu_mc --> interface
  function fgsl_sf_mathieu_ms_e(kind, order, qq, zz, result)
    integer(fgsl_int), intent(in) :: kind, order
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_result), intent(out) :: result
    integer(fgsl_int) :: fgsl_sf_mathieu_ms_e
    type(gsl_sf_result), target :: res
    fgsl_sf_mathieu_ms_e = gsl_sf_mathieu_ms_e(kind, order, qq, zz, c_loc(res))
    result = res
  end function fgsl_sf_mathieu_ms_e
!  fgsl_sf_mathieu_ms --> interface
  function fgsl_sf_mathieu_mc_array(kind, nmin, nmax, qq, zz, work, result_array)
    integer(fgsl_int), intent(in) :: kind, nmin, nmax
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_mathieu_workspace), intent(inout) :: work
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array
    integer(fgsl_int) :: fgsl_sf_mathieu_mc_array
    fgsl_sf_mathieu_mc_array = gsl_sf_mathieu_mc_array(kind, nmin, nmax, qq, zz, &
    work%gsl_sf_mathieu_workspace, c_loc(result_array))
  end function fgsl_sf_mathieu_mc_array
  function fgsl_sf_mathieu_ms_array(kind, nmin, nmax, qq, zz, work, result_array)
    integer(fgsl_int), intent(in) :: kind, nmin, nmax
    real(fgsl_double), intent(in) :: qq, zz
    type(fgsl_sf_mathieu_workspace), intent(inout) :: work
    real(fgsl_double), dimension(:), intent(inout), contiguous, target :: &
         result_array
    integer(fgsl_int) :: fgsl_sf_mathieu_ms_array
    fgsl_sf_mathieu_ms_array = gsl_sf_mathieu_ms_array(kind, nmin, nmax, qq, zz, &
    work%gsl_sf_mathieu_workspace, c_loc(result_array))
  end function fgsl_sf_mathieu_ms_array
